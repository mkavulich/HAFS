#----------------------------
# Test description
#----------------------------
metadata:
  description: >-
    Default configuration for an experiment. The valid values for most of the
    parameters are specified in valid_param_vals.yaml
#----------------------------
# USER config parameters
#----------------------------
user:
  #
  #-----------------------------------------------------------------------
  #
  # Set machine and queue parameters.  Definitions:
  #
  # MACHINE:
  # Machine on which the workflow will run.
  # Please see ush/valid_param_vals.yaml for a full list of supported
  # platforms.
  #
  # ACCOUNT:
  # The account under which to submit jobs to the queue.
  #
  # HOMEdir: 
  # The path to the user's HAFS clone.
  #
  # USHdir: 
  # The path to the user's ush directory in their HAFS clone. 
  # 
  # SCRIPTSdir: 
  # The path to the user's scripts directory in their HAFS clone. Is set to
  # ${USHdir}/metplus by default
  # 
  # PARMdir: 
  # The path to the user's parm directory in their HAFS clone.
  # 
  # MODULESdir: 
  # The path to the user's modulefiles directory in their HAFS clone.
  # 
  # METPLUS_CONF: 
  # The path to the user's final METplus configuration file. By default, 
  # METplus configuration files reside in HAFS/parm/metplus.
  #  
  # workflow_blocks:
  # This is a list of YAML files specifying the workflow tasks you want to run
  # This should be provided as a list of filenames chosen from those available
  # in HAFS/parm/wflow
  #-----------------------------------------------------------------------
  MACHINE: "BIG_COMPUTER"
  ACCOUNT: ""
  HOMEdir: ''
  USHdir: '{{ user.HOMEdir }}/ush'
  SCRIPTSdir: '{{ user.USHdir }}/vx_scripts'
  PARMdir: '{{ user.HOMEdir }}/parm'
  MODULESdir: '{{ user.HOMEdir }}/modulefiles/met_vx'
  METPLUS_CONF: '{{ user.PARMdir }}/metplus'
  workflow_blocks:
    - verify_pre.yaml

#----------------------------
# PLATFORM config parameters
#-----------------------------
platform:
  #
  #-----------------------------------------------------------------------
  #
  # NCORES_PER_NODE:
  # The number of cores available per node on the compute platform, now 
  # configurable for all platforms.
  #
  # TASKTHROTTLE:
  # The number of active tasks run simultaneously.
  #
  # MODULEFILE
  # Filename for the module file to load. Is set automatically for supported machines.
  #
  # SCHED:
  # The job scheduler to use (e.g., Slurm). Set this to an empty string in
  # order for the experiment generation script to set it depending on the
  # machine.
  #
  # PARTITION_DEFAULT:
  # If using the slurm job scheduler (i.e. if SCHED is set to "slurm"), the
  # default partition to which to submit workflow tasks. If this is not set or
  # is set to an empty string, it will be (re)set to a machine-dependent
  # value.  This is not used if SCHED is not set to "slurm".
  #
  # QUEUE_DEFAULT:
  # The default queue or QOS (if using the slurm job scheduler, where QOS
  # is Quality of Service) to which workflow tasks are submitted. If this is
  # not set or is set to an empty string, it will be (re)set to a machine-
  # dependent value.
  #-----------------------------------------------------------------------
  #
  NCORES_PER_NODE: ""
  TASKTHROTTLE: 1000
  MODULEFILE: 'vx_{{ user.MACHINE|lower }}'
  SCHED: ""
  PARTITION_DEFAULT: ""
  QUEUE_DEFAULT: ""

hafs:
#-----------------------------
# Settings that should match the HAFS configuration
#-----------------------------
  # DATE_FIRST_CYCL:
  # Starting cycle date of the FIRST forecast in the set of forecasts to run. Format is a timestamp object
  #
  # DATE_LAST_CYCL:
  # Starting cycle date of the LAST forecast in the set of forecasts to run. Format is a timestamp object
  #
  # INCR_CYCL_FREQ:
  # Increment in hours for Rocoto cycle frequency. Default is 24, which means cycle_freq=24:00:00
  #
  # FCST_LEN_HRS:
  # The length of each forecast, in integer hours.
  #
  # NOUTHRS:
  # Interval in hours of the atmospheric model output

  DATE_FIRST_CYCL: !!timestamp '1900-01-01 12:00:00'
  DATE_LAST_CYCL: !!timestamp '1900-01-01 12:00:00'
  INCR_CYCL_FREQ: 24
  FCST_LEN_HRS: 24
  NOUTHRS: 6

  # More information on the following settings can be found in the documentation for Automated
  # Tropical Cyclone Forecast Data/Text Files: https://ftp.nhc.noaa.gov/atcf/README
  #
  # BASIN:
  # Two-character indicator of the tropical cyclone basin: "AL", "EP", or "CP"
  #
  # STORM_ID:
  # AKA "storm number", the numerical ID for the storm being forecast. This must be specified in
  # config_vx.yaml; the default value '00' is invalid.
  #

  BASIN: "AL"
  STORM_ID: 00


#-----------------------------
# WORKFLOW config parameters
#-----------------------------
workflow:
  #
  #-----------------------------------------------------------------------
  #
  # Unique ID for workflow run that will be set in setup.py. Can be set
  # manually but this is not recommended.
  #
  #-----------------------------------------------------------------------
  #
  WORKFLOW_ID: ''
  #
  #
  #-----------------------------------------------------------------------
  #
  # Set cron-associated parameters.  Definitions:
  #
  # LOAD_MODULES_RUN_TASK_FP: 
  # Path to load_modules_run_task.sh.
  #-----------------------------------------------------------------------
  #
  LOAD_MODULES_RUN_TASK_FP: '{{ user.USHdir }}/load_modules_run_task.sh'

  #
  #-----------------------------------------------------------------------
  #
  # Set directories.  Definitions:
  #
  # EXPTDIR:
  # The full path to the experiment directory.
  #-----------------------------------------------------------------------
  #
  EXPTDIR: '{{ user.USHdir }}/test'
  #
  #-----------------------------------------------------------------------
  # PREEXISTING_DIR_METHOD:
  # Set the behavior in case the experiment directory already exists
  #
  # * "delete":
  #   The preexisting directory is deleted and a new directory (having the
  #   same name as the original) is created.
  #
  # * "rename":
  #   The preexisting directory is renamed and a new directory (having the
  #   same name as the original preexisting directory) is created. The new
  #   name of the preexisting directory consists of its original name and
  #   the suffix "_oldNNN", where NNN is a 3-digit integer chosen to make
  #   the new name unique.
  #
  # * "quit":
  #   The preexisting directory is left unchanged, but execution of the
  #   currently running script is terminated.  In this case, the preexisting
  #   directory must be dealt with manually before rerunning the script.
  #
  #-----------------------------------------------------------------------
  #
  PREEXISTING_DIR_METHOD: "rename"
  #
  #-----------------------------------------------------------------------
  #
  # Set file names.  Definitions:
  #
  # VX_CONFIG_FN:
  # Name of the user-specified configuration file for the forecast experiment.
  #
  #-----------------------------------------------------------------------
  #
  VX_CONFIG_FN: "config_vx.yaml"
  
  # 
  #-----------------------------------------------------------------------
  # These are staged in the exptdir at configuration time
  # 
  # VX_XML_FN:
  # Name of the workflow XML file that the experiment generation
  # script creates and that defines the workflow for the experiment.
  #
  # VAR_DEFNS_FN:
  # Name of file (yaml format) containing the definitions of the variables used
  # by the verification workflow. This is created when generate_vx_workflow.py is
  # run, as a combination of default settings (config_defaults.yaml), machine-
  # specific settings (in the directory ush/machine) and user settings specified
  # in VX_CONFIG_FN. This file will be read by all verification tasks as the sole
  # source of variable definitions
  #
  # LAUNCH_SCRIPT_FN:
  # Name of the script that can be used to (re)launch the experiment's rocoto
  # workflow.
  #
  # WFLOW_LAUNCH_LOG_FN:
  # Name of the log file that contains the output from successive calls to
  # the workflow launch script (LAUNCH_SCRIPT_FN).
  #
  # VAR_DEFNS_FP: 
  # Path to the location of the variable definition file (VAR_DEFNS_FN).
  #
  # LAUNCH_SCRIPT_FP:
  # Path to the workflow launch script 
  # (LAUNCH_SCRIPT_FN) in the experiment directory. 
  #
  # WFLOW_LAUNCH_LOG_FP: 
  # Path to the log file (WFLOW_LAUNCH_LOG_FN) in 
  # the experiment directory that contains output from successive 
  # calls to the workflow launch script. 
  # 
  #-----------------------------------------------------------------------
  #
  VX_XML_FN: "hafs_vx.xml"
  VAR_DEFNS_FN: "var_defns.yaml"
  LAUNCH_SCRIPT_FN: "launch_hafs_vx_wflow.sh"
  LAUNCH_LOG_FN: "log.launch_hafs_vx_wflow"

  VAR_DEFNS_FP: '{{ workflow.EXPTDIR }}/{{ workflow.VAR_DEFNS_FN }}'
  LAUNCH_SCRIPT_FP: '{{ user.USHdir }}/{{ workflow.LAUNCH_SCRIPT_FN }}'
  WFLOW_LAUNCH_LOG_FP: '{{ workflow.EXPTDIR }}/{{ workflow.LAUNCH_LOG_FN }}'

#----------------------------
# verification (vx) parameters
#-----------------------------
verification:
  #
  # METPLUS_VERBOSITY_LEVEL: 
  # Logging verbosity level used by METplus verification tools. 0 to 5, with 0 quiet and 5 loud.
  # 
  METPLUS_VERBOSITY_LEVEL: 2
  #
  # TECH_ID:
  # The identifier for the forecast data to use for TCPAIRS comparison, as read in from the
  # ATCF-format input file. Valid values are documented here:
  # https://ftp.nhc.noaa.gov/atcf/docs/nhc_techlist.dat
  TECH_ID: 'OFCL'
  #   
  # VX_FCST_MODEL_NAME:
  # String that specifies a descriptive name for the model being verified.
  # This is used in forming the names of the verification output files as
  # well as in the contents of those files.
  #
  VX_FCST_MODEL_NAME: 'HAFS'
  #
  # VX_FCST_INPUT_BASEDIR:
  # Template for top-level directory containing forecast (but not obs)
  # files that will be used as input into METplus for verification.
  #
  # VX_OUTPUT_BASEDIR:
  # Template for top-level directory in which METplus will place its
  # output.
  #
  VX_FCST_INPUT_BASEDIR: '{{ workflow.EXPTDIR }}'
  VX_OUTPUT_BASEDIR: '{{ workflow.EXPTDIR }}'
  #
  # File name and path templates used in the verification tasks.
  #
  # FCST_FN_TEMPLATE:
  # Template for the names of the forecast files that are inputs to the
  # verification tasks.
  # 
  FCST_FN_TEMPLATE: 'hafs.t{init?fmt=%H?shift=-${time_lag}}z.prslev.f{lead?fmt=%HHH?shift=${time_lag}}.grib2'
  #

